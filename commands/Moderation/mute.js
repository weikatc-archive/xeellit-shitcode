const { findMember, parseDuration: parse, isMod, selectReason } = require('../../client/util')
const { SnowflakeUtil } = require('discord.js')
const Mute = require('../../classes/Mute')

module.exports = {
    command: {
        description: '–∑–∞–≥–ª—É—à–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤—Ä–µ–º—è –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —á–∞—Ç–∞—Ö',
        fullDescription: '–ß—Ç–æ–±—ã –ø—Ä–∏ –º—É—Ç–µ –∏–∑—ã–º–∞–ª–∏—Å—å –≤—Å–µ —Ä–æ–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞, –ø—Ä–æ–ø–∏—à–∏—Ç–µ `{{prefix}}mutes roles`',
        usage: '<@—é–∑–µ—Ä> [–≤—Ä–µ–º—è]',
        aliases: ['m'],
        examples: {
            '{{prefix}}mute @Tatsumaki 1h': '–∑–∞–≥–ª—É—à–∏—Ç **@Tatsumaki** –Ω–∞ 1 —á–∞—Å'
        },
        permissions: {
            me: ['MANAGE_ROLES']
        }
    },
    execute: async function (message, args, options) {
        if (!isMod(message, 'MANAGE_MESSAGES')) return message.channel.send('–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, —á–µ–º —Ç—ã –¥—É–º–∞–ª, –∫–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –¢–∞–∫ –≤–æ—Ç, –ø–æ–¥—É–º–∞—é –∑–∞ —Ç–µ–±—è. –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤')
        if (!args.length) return message.channel.send(xee.commands.help('mute', options.prefix))

        const member = await findMember(message, args.shift())
        if (!member) return message.channel.send(`–ü–æ –º–æ–µ–º—É, —Ç—ã –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`)

        if (member.user.id === message.author.id) return message.channel.send('–ó–∞—á–µ–º –∂–µ —Ç—ã –ø—ã—Ç–∞–µ—à—å—Å—è –∑–∞–º—É—Ç–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è?')
        if (member.user.id === xee.client.user.id) return message.channel.send('–ü–æ—á–µ–º—É —Ç—ã –ø—ã—Ç–∞–µ—à—å—Å—è –º–µ–Ω—è –∑–∞–º—É—Ç–∏—Ç—å? üò®')

        if (!options.warn && message.author.id !== message.guild.ownerId) {
            if (isMod(message, 'MANAGE_MESSAGES', member)) return message.channel.send(`**${member.user.tag}** –º–æ–¥–µ—Ä–∞—Ç–æ—Ä, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–≥–ª—É—à–∞—Ç—å —Å–≤–æ–∏—Ö –∫–æ–ª–ª–µ–≥.`)
            if (!(message.member.roles.highest.comparePositionTo(member.roles.highest) > 0)) return message.channel.send(`–í–∞—à–∞ –≤—ã—Å—à–∞—è —Ä–æ–ª—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã—à–µ, —á–µ–º —É **${member.user.tag}**.`)
        }

        if (!message.guild.data.muteRole) return message.channel.send(`–†–æ–ª–∏ –¥–ª—è –∑–∞–≥–ª—É—à–µ–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–±–ª—é–¥–∞–µ—Ç—Å—è. –ß—Ç–æ–±—ã –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Ä–æ–ª—å –∑–∞–≥—Ä—É—à–µ–Ω–∏—è: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ \`${options.prefix}mutes <@—Ä–æ–ª—å>\``)
        if (!message.guild.data.muteRole.editable) return message.channel.send('–†–æ–ª—å –¥–ª—è –∑–∞–≥–ª—É—à–µ–Ω–∏–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤—ã—à–µ –∏–ª–∏ –Ω–∞ –æ–¥–Ω–æ–π –≤—ã—Å–æ—Ç–µ —Å–æ –º–Ω–æ–π. –ü—Ä–∏–∫–æ–ª—å–Ω–æ!')

        if (!args.length) {
            const reasons = await xee.db.collection('reasons').find({ guild: message.guild.id, type: 'mute' }).toArray()
            if (reasons?.length) {
                const reason = reasons[
                    await selectReason('mute', message, {
                        content: `–¢–∞–∫ –∫–∞–∫ –≤—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∏—á–∏–Ω—É –∑–∞–≥–ª—É—à–µ–Ω–∏—è **${member.user.tag}**, –≤—ã –¥–æ–ª–∂–Ω—ã –≤—ã–±—Ä–∞—Ç—å –µ—ë –∏–∑ –∑–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞:`,
                        placeholder: '–ü—Ä–∏—á–∏–Ω–∞ –∑–∞–≥–ª—É—à–µ–Ω–∏—è',
                        user: message.author.id,
                        menuOptions: reasons.map(({ reason, time }, index) => ({
                            description: `–ó–∞–≥–ª—É—à–µ–Ω–∏–µ –Ω–∞ ${xee.constructor.ruMs(parse(time))}`,
                            value: index.toString(),
                            label: reason
                        }))
                    })
                ]

                if (!reason) return
                message._flags.add('force')
                args = [ reason.time, reason.reason ].filter(c => c !== undefined)
            } else args = ['2y']
        }

        let _muteTime = args.shift()
        let muteTime = (+_muteTime * 1000) || parse(_muteTime?.toLowerCase())

        if (!muteTime) {
            muteTime = 63115200000
            args.unshift(_muteTime)
        }

        if (muteTime < 0) return message.channel.send('–ß—Ç–æ —Ç—ã –ø—ã—Ç–∞–µ—à—å—Å—è —Å–¥–µ–ª–∞—Ç—å?')
        if (muteTime > 63115200000) return message.channel.send('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞–≥–ª—É—à–µ–Ω–∏—è: 2 –≥–æ–¥–∞')

        const auditReason = `–∑–∞–≥–ª—É—à–µ–Ω–∏–µ –Ω–∞ ${xee.constructor.ruMs(muteTime)} [${message.author.tag}]`
        const mute = message.guild.data.mutes.find(mute => mute.memberId === member.id)
        const roles = []

        if (message.guild.data.autoHardMute) {
            for (const role of member.roles.cache.values()) {
                if (role.editable && ![
                    message.guild.id,
                    message.guild.data.muteRole.id
                ].includes(role.id)) roles.push(role.id)
            }
        }

        if (mute) {
            await mute.purge()
            mute.clearTimeout()
            _muteTime = muteTime
            muteTime += mute.time - Date.now()
        } else await Promise.all([
            roles.length && member.roles.remove(roles).catch(() => {}),
            member.roles.add(message.guild.data.muteRole, auditReason),
        ].filter(Boolean))


        const data = new Mute(message.guild, {
            member: member.id,
            time: Date.now() + muteTime,
            id: SnowflakeUtil.generate(),
            roles: mute ? mute.roles : roles,
            reason: args.join(' ') || null,
        })

        await data.save()
        data.setTimeout()

        if (!options.message) {
            options.message = (
                mute ? 
                `–£ —É—á–∞—Å—Ç–Ω–∏–∫–∞ **${member.user.tag}** –±—ã–ª –ø—Ä–æ–¥–ª—ë–Ω –º—É—Ç –Ω–∞ **${xee.constructor.ruMs(_muteTime)}**.` : 
                `–£—á–∞—Å—Ç–Ω–∏–∫ —Å–µ—Ä–≤–µ—Ä–∞ **${member.user.tag}** –ø–æ–ª—É—á–∏–ª –º—É—Ç –Ω–∞ **${xee.constructor.ruMs(muteTime)}**`
            ) + `${data.reason ? `\n–ü—Ä–∏—á–∏–Ω–∞: \`${data.reason.slice(0, 600)}\`` : ''}`
        }

        if (!options.warn) {
            message.guild.data.entries.createCase(mute ? 'muteTime' : 'mute', member, message.member, {
                reason: data.reason, time: mute && _muteTime || muteTime
            })
        }
        
        return message.channel.send(options.message)
    }
}
