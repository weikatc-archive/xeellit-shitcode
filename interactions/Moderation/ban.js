const { isMod, parseDuration } = require('../../client/util')
const { SnowflakeUtil, MessageActionRow, MessageSelectMenu } = require('discord.js')
const Mute = require('../../classes/Mute')

module.exports = {
    aliases: ['–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å'],
    guildOnly: true,
    config: {
        name: 'ban',
        description: '–ë–∞–Ω–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ',
        options: [{
            name: '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            description: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –∑–∞–±–∞–Ω–∏—Ç—å',
            required: true,
            type: 6,
        }, {
            name: '–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
            description: '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–∞–Ω–∞',
            type: 3
        }, {
            name: '–ø—Ä–∏—á–∏–Ω–∞',
            description: '–ü—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏. –ò–¥–µ—Ç –≤ –º–æ–¥–µ—Ä–∞—Ç–∏–≤–Ω—ã–π –ª–æ–≥',
            type: 3
        }]
    },
    async execute(interaction) {
        const reply = str => interaction.reply({ content: str, ephemeral: true })
        if (!interaction.guild.members.me.permissions.has('BAN_MEMBERS')) return reply('–ù—É –≤–æ—Ç, –æ–±–ª–æ–º. –£ –º–µ–Ω—è –Ω–µ—Ç –ø—Ä–∞–≤–æ –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.')

        const member = interaction.options.get('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')?.member || interaction.options.get('user')?.member
        if (!member) return reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ.')

        if (member.id === interaction.user.id) return reply('–ó–∞—á–µ–º —Ç—ã –ø—ã—Ç–∞–µ—à—å—Å—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è? –î—É—Ä–∏–∫...')
        if (member.id === xee.client.user.id) return reply('–ù–µ –Ω—É–∂–Ω–æ –ø—ã—Ç–∞—Ç—å—Å—è –º–µ–Ω—è –∑–∞–±–∞–Ω–∏—Ç—å, –≤–µ–¥—å —è –Ω–µ –º–æ–≥—É —ç—Ç–æ–≥–æ —Å–¥–µ–ª–∞—Ç—å...')
        if (!isMod(interaction, 'BAN_MEMBERS')) return reply(xee.random([
            '‚ôªÔ∏è **{{member}}** –±—ã–ª —É—Ç–∏–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º **{{author}}**',
            'üïØÔ∏è **{{member}}** –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º **{{author}}**'
        ]).parse({ author: interaction.user.tag, member: member.user.username }) + ' –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ.')

        if (!member.bannable) return reply(`–ú–æ—è –Ω–∞–∏–≤—ã—Å—à–∞—è —Ä–æ–ª—å –Ω–∏–∂–µ, —á–µ–º –Ω–∞–∏–≤—ã—Å—à–∞—è —Ä–æ–ª—å **${member.user.tag}**. –ó–∞–±–∞–Ω–∏—Ç—å –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è.`)

        if (interaction.user.id !== interaction.guild.ownerId) {
            if (isMod(interaction, 'BAN_MEMBERS', member) && (
                interaction.member.permissions.has('ADMINISTRATOR') ? 
                    member.permissions.has('ADMINISTRATOR')
                : true
            )) return reply(`–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å **${member.user.tag}**, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.`)
            if (!(interaction.member.roles.highest.comparePositionTo(member.roles.highest) > 0)) return reply(`–í–∞—à–∞ –≤—ã—Å—à–∞—è —Ä–æ–ª—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã—à–µ, —á–µ–º —É **${member.user.tag}**.`)
        }

        const data = await interaction.guild.getData()
        if (data.toggle?.includes?.('ban')) return reply('–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å–µ–≤—Ä–µ—Ä–µ –≤—ã–∫–ª—é—á–µ–Ω–∞.')

        const bans = await interaction.guild.bans.fetch()
        if (bans && bans.some(x => x.user && x.user.id === member.id)) return reply(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å **${member.user.tag}** –±—ã–ª —Ä–∞–Ω–µ–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.`)

        let reason = interaction.options.get('–ø—Ä–∏—á–∏–Ω–∞')?.value
        const _duration = interaction.options.get('–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å')?.value

        
        const reasons = await xee.db.collection('reasons').find({
            guild: interaction.guild.id,
            type: 'ban'
        }).toArray()

        let duration = parseDuration(_duration) || null

        if (reasons.length) {
            if (!_duration && !reason) {
                await interaction.reply({
                    content: `–¢–∞–∫ –∫–∞–∫ –≤—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ **${member.user.tag}**, –≤—ã –¥–æ–ª–∂–Ω—ã –≤—ã–±—Ä–∞—Ç—å –µ—ë –∏–∑ –∑–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞:`,
                    components: [
                        new MessageActionRow()
                            .addComponents(
                                new MessageSelectMenu() 
                                    .setCustomId(interaction.id + '-reason')
                                    .setPlaceholder('–ü—Ä–∏—á–∏–Ω–∞ –∑–∞–≥–ª—É—à–µ–Ω–∏—è')
                                    .addOptions(
                                        reasons.map(({ reason, time }, index) => ({
                                            description: time ? `–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–∞ ${xee.constructor.ruMs(parseDuration(time))}` : '–ü–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞',
                                            value: index.toString(),
                                            label: reason
                                        }))
                                    )
                            )
                    ]
                })

                const selected = await interaction.channel.awaitMessageComponent({
                    filter: c => c.user.id === interaction.user.id && c.message.interaction.id === interaction.id,
                    idle: 120000
                }).catch(() => null)

                if (!selected) return interaction.deleteReply()
                const _reason = reasons[+selected?.values.shift()]
                if (_reason.time) duration = parseDuration(_reason.time)
                reason = _reason.reason
            } else if (reason && !_duration) {
                const _reason = reasons.find(r => r.reason.toLowerCase().includes(reason))
                if (_reason) {
                    if (_reason.time) duration = parseDuration(_reason.time)
                    reason = _reason.reason
                }
            }
        }

        if (duration) {
            if (duration < 1e4) return reply('–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –±–∞–Ω–∞: 10 —Å–µ–∫—É–Ω–¥')
            if (duration > 63115200000) return reply('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –±–∞–Ω–∞: 2 –≥–æ–¥–∞')
        }

        await member.ban({
            reason: `${reason?.slice(0, 509 - interaction.user.tag.length) || ''} [${interaction.user.tag}]`
        })

        await (interaction.replied && interaction.editReply || interaction.reply).bind(interaction)({
            content: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å **${member.user.tag}** –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ${duration ? ` –Ω–∞ **${xee.constructor.ruMs(duration)}**` : ''}.\n${reason ? `–ü—Ä–∏—á–∏–Ω–∞: \`${reason.slice(0, 600)}\`` : ''}`,
            components: []
        })

        if (duration) {
            const banId = SnowflakeUtil.generate()
            await xee.db.collection('bans').insertOne({ _id: banId, user: member.id, guild: interaction.guild.id, end: Date.now() + duration })
            await xee.rest.kaneki.api.bot.ban.post({ json: { id: banId } })
        }
    
        interaction.guild.data.entries.createCase('ban', member, interaction.member, {
            time: duration,
            reason
        })
    }
}
